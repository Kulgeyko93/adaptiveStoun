{"version":3,"sources":["components/Header/Header.tsx","store/actions.ts","components/Post/Post.tsx","components/PostItem/PostItem.tsx","components/Paginator/Paginator.tsx","store/store.ts","store/dafaultState.ts","pages/Main/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","Navbar","bg","variant","Nav","className","Item","to","post_actions","page_actions","Post","dispatch","useState","valueTitle","setValueTitle","valuePost","setValuePost","useForm","register","handleSubmit","errors","formState","Container","Row","InputGroup","Text","id","FormControl","aria-label","aria-describedby","value","required","maxLength","onChange","e","target","title","type","post","Button","onClick","postMessage","PostItem","item","Jumbotron","fluid","Paginator","data","pageSize","isPaginatorNeed","currentPage","dispatchPage","React","state","setState","useEffect","pageNumbers","i","Math","ceil","length","push","Pagination","Prev","page","disabled","map","p","currentTarget","nodeName","pageNumber","Number","innerText","active","Next","posts_reducer","action","posts","Error","page_reducer","initialStatePosts","initialStatePage","Main","useReducer","statePage","setData","setIsPaginatorNeed","firstValueInPortion","lastValueInPortion","dataForCurrentPage","slice","index","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a94544d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar bg='dark' variant='dark'>\r\n      <Nav className='mr-auto header'>\r\n        <Nav.Item>\r\n          <NavLink to='/'>Home</NavLink>\r\n        </Nav.Item>\r\n\r\n        <Nav.Item>\r\n          <NavLink to='/posts'>Post</NavLink>\r\n        </Nav.Item>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const post_actions = {\r\n  SET_POST_TITLE: \"SET_POST_TITLE\",\r\n};\r\n\r\nexport const page_actions = {\r\n  SET_CURRENT_PAGE: \"SET_CURRENT_PAGE\",\r\n  SET_PAGE_INCREMENT: \"SET_PAGE_INCREMENT\",\r\n  SET_PAGE_DECREMENT: \"SET_PAGE_DECREMENT\"\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport {\r\n  InputGroup,\r\n  FormControl,\r\n  Container,\r\n  Row,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { post_actions } from \"./../../store/actions\";\r\nimport \"./post.scss\";\r\n\r\ntype Inputs = {\r\n  title: string;\r\n  post: string;\r\n};\r\n\r\nconst Post = ({ dispatch }: any): JSX.Element => {\r\n  const [valueTitle, setValueTitle] = useState<string>(\"\");\r\n  const [valuePost, setValuePost] = useState<string>(\"\");\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<Inputs>();\r\n\r\n  const handleAddListItem = () => {\r\n    if (errors.title || errors.post) return;\r\n    if (errors)\r\n      dispatch({\r\n        type: post_actions.SET_POST_TITLE,\r\n        title: valueTitle,\r\n        postMessage: valuePost,\r\n      });\r\n    setValueTitle(\"\");\r\n    setValuePost(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className='post'>\r\n        <Row>\r\n          <InputGroup className='mb-2'>\r\n            <InputGroup.Text id='inputGroup-sizing-default'>\r\n              Title\r\n            </InputGroup.Text>\r\n\r\n            <FormControl\r\n              aria-label='Default'\r\n              aria-describedby='inputGroup-sizing-default'\r\n              value={valueTitle}\r\n              {...register(\"title\", { required: true, maxLength: 10 })}\r\n              onChange={(e) => {\r\n                setValueTitle(e.target.value);\r\n              }}\r\n            />\r\n          </InputGroup>\r\n          {errors.title && (\r\n            <h4 className='text-error'>Title isn't {errors.title.type}</h4>\r\n          )}\r\n          {!errors.title && <h4>Enter title</h4>}\r\n        </Row>\r\n        <Row>\r\n          <InputGroup className='mb-3'>\r\n            <InputGroup.Text id='inputGroup-sizing-default'>\r\n              Post\r\n            </InputGroup.Text>\r\n            <FormControl\r\n              aria-label='Default'\r\n              aria-describedby='inputGroup-sizing-default'\r\n              value={valuePost}\r\n              {...register(\"post\", { required: true, maxLength: 40 })}\r\n              onChange={(e) => {\r\n                setValuePost(e.target.value);\r\n              }}\r\n            />\r\n          </InputGroup>\r\n          {errors.post && (\r\n            <h4 className='text-error'>Post isn't {errors.post.type}</h4>\r\n          )}\r\n          {!errors.post && <h4>Enter post</h4>}\r\n        </Row>\r\n        <Row>\r\n          <Button variant='success' onClick={handleSubmit(handleAddListItem)}>\r\n            Create post\r\n          </Button>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { Jumbotron, Container } from \"react-bootstrap\";\r\n\r\nconst PostItem = ({ item }: any): JSX.Element => {\r\n  return (\r\n    <Jumbotron fluid>\r\n      <Container>\r\n        <h1>{item.title}</h1>\r\n        <p>{item.postMessage}</p>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default PostItem;\r\n","import * as React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { Pagination } from \"react-bootstrap\";\r\nimport { StatePostType } from \"./../../types_intefaces/types\";\r\nimport { page_actions } from \"./../../store/actions\";\r\n\r\ntype Props = {\r\n  data: Array<StatePostType>;\r\n  pageSize: number;\r\n  isPaginatorNeed: boolean;\r\n  currentPage: number;\r\n  dispatchPage: any;\r\n};\r\n\r\nconst Paginator = ({\r\n  data,\r\n  pageSize,\r\n  isPaginatorNeed,\r\n  currentPage,\r\n  dispatchPage,\r\n}: Props): JSX.Element => {\r\n  const [state, setState] = React.useState<Array<StatePostType>>(data);\r\n\r\n  useEffect(() => {\r\n    setState(data);\r\n  }, [data]);\r\n\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(state.length / pageSize); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isPaginatorNeed && (\r\n        <Pagination>\r\n          <Pagination.Prev\r\n            onClick={() => {\r\n              if (currentPage > 1)\r\n                dispatchPage({\r\n                  type: page_actions.SET_CURRENT_PAGE,\r\n                  page: currentPage - 1,\r\n                });\r\n            }}\r\n            disabled={currentPage === 1}\r\n          />\r\n          {pageNumbers.map((p) => (\r\n            <Pagination.Item\r\n              key={p}\r\n              onClick={(e: React.MouseEvent<HTMLUListElement>) => {\r\n                if ((e.currentTarget as HTMLElement).nodeName === \"A\") {\r\n                  const pageNumber = Number(\r\n                    (e.currentTarget as HTMLElement).innerText\r\n                  );\r\n                  dispatchPage({\r\n                    type: page_actions.SET_CURRENT_PAGE,\r\n                    page: pageNumber,\r\n                  });\r\n                }\r\n              }}\r\n              active={p === currentPage}\r\n            >\r\n              {p}\r\n            </Pagination.Item>\r\n          ))}\r\n          <Pagination.Next\r\n            onClick={() => {\r\n              if (currentPage < pageNumbers.length)\r\n                // setCurrentPage(currentPage + 1);\r\n                dispatchPage({\r\n                  type: page_actions.SET_CURRENT_PAGE,\r\n                  page: currentPage + 1,\r\n                });\r\n            }}\r\n            disabled={currentPage === pageNumbers.length}\r\n          />\r\n        </Pagination>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paginator;\r\n","import {post_actions, page_actions} from './actions';\r\nimport {StatePostType, ActionsPostType} from './../types_intefaces/types'\r\n\r\nexport const posts_reducer = (state: StatePostType, action: ActionsPostType) =>{\r\n  switch (action.type) {\r\n    case post_actions.SET_POST_TITLE:\r\n      return {\r\n        posts: [\r\n          ...state.posts, \r\n          {\r\n            title: action.title,\r\n            postMessage: action.postMessage,\r\n          }\r\n        ]\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nexport const page_reducer = (state: any, action: any) => {\r\n  switch (action.type) {\r\n    case page_actions.SET_CURRENT_PAGE:\r\n      return {page: action.page};\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\n","import { StatePostType, StatePageType } from '../types_intefaces/types';\r\n\r\n\r\nexport const initialStatePosts: StatePostType = {\r\n  posts: [\r\n    {\r\n      title: \"title\",\r\n      postMessage: \"postMessage\",\r\n    },\r\n    {\r\n      title: \"title1\",\r\n      postMessage: \"postMessage\",\r\n    },\r\n    {\r\n      title: \"title2\",\r\n      postMessage: \"postMessage\",\r\n    },\r\n    {\r\n      title: \"title3\",\r\n      postMessage: \"postMessage\",\r\n    },\r\n    {\r\n      title: \"title4\",\r\n      postMessage: \"postMessage\",\r\n    },\r\n    {\r\n      title: \"title5\",\r\n      postMessage: \"postMessage\",\r\n    },\r\n    {\r\n      title: \"title6\",\r\n      postMessage: \"postMessage\",\r\n    },\r\n    {\r\n      title: \"title\",\r\n      postMessage: \"postMessage\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport const initialStatePage: StatePageType = { page: 2 };","import React, { useState, useEffect } from \"react\";\r\nimport PostItem from \"../../components/PostItem/PostItem\";\r\nimport { OnePostType } from \"./../../types_intefaces/types\";\r\nimport Paginator from \"./../../components/Paginator/Paginator\";\r\nimport { page_reducer } from \"./../../store/store\";\r\nimport { initialStatePage } from \"./../../store/dafaultState\";\r\nimport \"./main.scss\";\r\n\r\nconst Main = ({ posts }: any) => {\r\n  const pageSize = 2;\r\n  const [statePage, dispatchPage] = React.useReducer(\r\n    page_reducer,\r\n    initialStatePage\r\n  );\r\n  const [data, setData] = useState(posts);\r\n\r\n  const [isPaginatorNeed, setIsPaginatorNeed] = useState(true);\r\n\r\n  useEffect(() => {\r\n    data.length <= pageSize\r\n      ? setIsPaginatorNeed(true)\r\n      : setIsPaginatorNeed(false);\r\n  }, [data, pageSize]);\r\n\r\n  useEffect(() => {\r\n    const firstValueInPortion = (statePage.page - 1) * pageSize;\r\n    const lastValueInPortion = statePage.page * pageSize;\r\n\r\n    const dataForCurrentPage = posts.slice(\r\n      firstValueInPortion,\r\n      lastValueInPortion\r\n    );\r\n\r\n    return setData(dataForCurrentPage);\r\n  }, [posts, statePage.page]);\r\n\r\n  return (\r\n    <div className='main'>\r\n      <div className='list__items'>\r\n        {data.map((item: OnePostType, index: string) => (\r\n          <PostItem key={index} item={item} />\r\n        ))}\r\n      </div>\r\n\r\n      <Paginator\r\n        data={posts}\r\n        pageSize={2}\r\n        isPaginatorNeed={isPaginatorNeed}\r\n        currentPage={statePage.page}\r\n        dispatchPage={dispatchPage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport Post from \"./components/Post/Post\";\nimport Main from \"./pages/Main/Main\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { posts_reducer } from \"./store/store\";\nimport { initialStatePosts } from \"./store/dafaultState\";\nimport \"./app.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// const StateContext = React.createContext(state);\n\nconst App = (): JSX.Element => {\n  // const initialState = {\n  //   title: \"title\",\n  //   postMessage: \"postMessage\",\n  // };\n\n  const [state, dispatch] = React.useReducer(posts_reducer, initialStatePosts);\n  return (\n    <Container className='app' fluid>\n      <Row>\n        {/* <Col className='page'> */}\n        <Header />\n        {/* </Col> */}\n      </Row>\n      {/* <Row> */}\n      {/* <Col> */}\n      <Route exact path='/' component={() => <Main posts={state.posts} />} />\n      <Route\n        exact\n        path='/posts'\n        component={() => <Post dispatch={dispatch} />}\n      />\n      {/* </Col> */}\n      {/* </Row> */}\n    </Container>\n    // <div className='App'>\n\n    // </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}